from machine import Pin
import neopixel
import time

WIDTH = 10
HEIGHT = 10
np = neopixel.NeoPixel(Pin(26), WIDTH * HEIGHT)
np.fill((0, 0, 0))           # clear all LEDs
np.write() 

Yellow_Smile=[(253, 234, 2), (253, 234, 2), (253, 234, 2), (253, 234, 2), (253, 234, 2), (253, 234, 2), (253, 234, 2), (253, 234, 2), (253, 234, 2), (253, 234, 2), (253, 234, 2), (253, 234, 2), (253, 234, 2), (253, 234, 2), (253, 234, 2), (253, 234, 2), (253, 234, 2), (253, 234, 2), (253, 234, 2), (253, 234, 2), (253, 234, 2), (253, 234, 2), (255, 0, 0), (255, 0, 0), (253, 234, 2), (253, 234, 2), (255, 0, 0), (255, 0, 0), (253, 234, 2), (253, 234, 2), (253, 234, 2), (253, 234, 2), (255, 0, 0), (255, 0, 0), (253, 234, 2), (253, 234, 2), (255, 0, 0), (255, 0, 0), (253, 234, 2), (253, 234, 2), (253, 234, 2), (253, 234, 2), (253, 234, 2), (253, 234, 2), (253, 234, 2), (253, 234, 2), (253, 234, 2), (253, 234, 2), (253, 234, 2), (253, 234, 2), (253, 234, 2), (255, 0, 0), (253, 234, 2), (253, 234, 2), (253, 234, 2), (253, 234, 2), (253, 234, 2), (253, 234, 2), (255, 0, 0), (253, 234, 2), (253, 234, 2), (255, 0, 0), (248, 230, 7), (253, 234, 2), (253, 234, 2), (253, 234, 2), (253, 234, 2), (248, 230, 7), (255, 0, 0), (253, 234, 2), (253, 234, 2), (248, 230, 7), (255, 0, 0), (255, 0, 0), (255, 0, 0), (255, 0, 0), (255, 0, 0), (255, 0, 0), (253, 234, 2), (253, 234, 2), (253, 234, 2), (253, 234, 2), (253, 234, 2), (253, 234, 2), (253, 234, 2), (253, 234, 2), (253, 234, 2), (253, 234, 2), (253, 234, 2), (253, 234, 2), (253, 234, 2), (253, 234, 2), (253, 234, 2), (253, 234, 2), (253, 234, 2), (253, 234, 2), (253, 234, 2), (253, 234, 2), (253, 234, 2), (253, 234, 2)]

def man_print(frame):

    # Step 1: Convert to 2D grid
    grid = [frame[i * WIDTH:(i + 1) * WIDTH] for i in range(HEIGHT)]

    # Step 2: Rotate 90 degrees clockwise
    rotated_grid = list(zip(*grid[::-1]))

    # Step 3: Flatten rotated grid back to list
    rotated_rgb_list = [pixel for row in rotated_grid for pixel in row]

    # Step 4: Apply serpentine mapping to rotated list
    for idx in range(len(rotated_rgb_list)):
        row = idx // WIDTH
        col = idx % WIDTH

        if row % 2 == 0:
            serp_idx = row * WIDTH + col
        else:
            serp_idx = row * WIDTH + (WIDTH - 1 - col)

        np[serp_idx] = rotated_rgb_list[idx]

    np.write()

man_print(Yellow_Smile)



